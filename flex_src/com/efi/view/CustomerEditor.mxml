<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.efi.view.*"
width="100%" height="100%" title="Found {accountRecords} accounts."
creationComplete="init()">
                             
<mx:RemoteObject id="loaderService" destination="accountService"
result="handleLoadResult(event)"  fault="handleFault(event)"
showBusyCursor="true" />
                             
<mx:RemoteObject id="deleteService" destination="accountService"
result="handleDeleteResult(event)" fault="handleFault(event)" showBusyCursor="true" />

<mx:Producer id="producer" destination="accounts"/>
<mx:Consumer id="consumer" destination="accounts" message="messageHandler(event.message)"/>
<mx:Consumer id="notification_consumer" destination="notifications" message="messageHandler(event.message)"/>

<mx:Script>                                   
<![CDATA[
                                         
	import com.efi.vo.Account;                                         
	import mx.controls.Alert;                                         
	import mx.managers.PopUpManager;                                         
	import mx.containers.TitleWindow;                                         
	import mx.collections.ArrayCollection;                                         
	import mx.rpc.events.ResultEvent;                                         
	import mx.rpc.events.FaultEvent;                                         
	import mx.messaging.messages.AsyncMessage;
	import mx.messaging.messages.IMessage;
                                        
	[Bindable]                                         
	private var message:String;
                                                                                  
	[Bindable]                                
	private var accounts:ArrayCollection = new ArrayCollection();
                                                                         
	[Bindable]                               
	private var accountRecords:int = 0;         
	
	public function init():void {
		consumer.subscribe();
		notification_consumer.subscribe();     
		loadAccounts();
	}      
	                                                   	
	public function loadAccounts():void {   
	    loaderService.getAccounts(); 
	}

	private function send():void
	{
		var message:IMessage = new AsyncMessage();
		message.body.accounts = "*";
		//producer.send(message);
	}
					
	private function messageHandler(message:IMessage):void
	{
   		loadAccounts();
	}
                                  
private function deleteAccount():void {              
     if(dataGrid.selectedItem != null) {
          var selectedItem:Account = dataGrid.selectedItem as Account;
          deleteService.deleteAccount(selectedItem.id);                                     
     }
                                         
}

private function createAccount():void {
//     var titleWindow:UserForm = UserForm(PopUpManager.createPopUp(this, UserForm, true));
//     titleWindow.setStyle("borderAlpha", 0.9);
//     titleWindow.formIsEmpty = true;
}
                                                         
private function updateUser():void {
//     var titleWindow:UserForm = UserForm(PopUpManager.createPopUp(this, UserForm, true));
//     titleWindow.setStyle("borderAlpha", 0.9);
//     titleWindow.user = dataGrid.selectedItem as User;
//     titleWindow.formIsEmpty = false;
}
                                         
private function handleLoadResult(ev:ResultEvent):void {
     accounts = ev.result as ArrayCollection;
     accountRecords = accounts.length;
}
                                 
private function handleDeleteResult(ev:ResultEvent):void {
     loadAccounts();
     send();
}
                   
private function handleFault(ev:FaultEvent):void {                
message = "Error: "                          
+ ev.fault.faultCode + " - "                                  
+ ev.fault.faultDetail + " - "                                  
+ ev.fault.faultString;                                 
}
                                   
]]>
                             
</mx:Script>

<mx:VBox width="100%" height="100%">
<mx:Label text="{message}" fontWeight="bold" includeInLayout="false" />
<mx:DataGrid id="dataGrid" width="100%" height="100%" dataProvider="{accounts}"
doubleClickEnabled="true" doubleClick="updateAccount()" >               
<mx:columns>
     <mx:DataGridColumn dataField="id" headerText="User ID" width="100"/>                                   
</mx:columns>
</mx:DataGrid>
                       
<mx:ControlBar horizontalAlign="center">                        
     <mx:Button label="Create Account" click="createUser()" toolTip="Create a new account and store it in the database." />
     <mx:Button label="Update Account" click="updateUser()" enabled="{dataGrid.selectedItem}" toolTip="Update an existing database account." />
     <mx:Button label="Delete Account" click="deleteUser()" enabled="{dataGrid.selectedItem}" toolTip="Delete the account from the database." />
     <mx:Button label="Reload Data" click="loadUsers()" toolTip="Reload the account list from the database." />
</mx:ControlBar>
</mx:VBox>
</mx:Panel>